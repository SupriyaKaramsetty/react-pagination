{"ast":null,"code":"import { useState } from 'react';\n\nconst Pagination = initialState => {\n  const {\n    itemsPerPage,\n    data,\n    startFrom\n  } = initialState;\n  const perPage = itemsPerPage ? itemsPerPage : 20;\n  const pages = Math.ceil(Object.keys(data).length / perPage);\n  const pagination = [];\n  const [currentPage, setCurrentPage] = useState(startFrom <= pages ? startFrom : 1);\n  const [slicedData, setSlicedData] = useState([...data].slice((currentPage - 1) * perPage, currentPage * perPage));\n  let ellipsisLeft = false;\n  let ellipsisRight = false;\n\n  for (let i = 1; i <= pages; i++) {\n    if (i === currentPage) {\n      pagination.push({\n        id: i,\n        current: true,\n        ellipsis: false\n      });\n    } else {\n      if (i < 2 || i > pages - 1 || i === currentPage - 1 || i === currentPage + 1) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: false\n        });\n      } else if (i > 1 && i < currentPage && !ellipsisLeft) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: true\n        });\n        ellipsisLeft = true;\n      } else if (i < pages && i > currentPage && !ellipsisRight) {\n        pagination.push({\n          id: i,\n          current: false,\n          ellipsis: true\n        });\n        ellipsisRight = true;\n      }\n    }\n  }\n\n  const changePage = (page, e) => {\n    e.preventDefault();\n\n    if (page !== currentPage) {\n      setCurrentPage(page);\n      setSlicedData([...data].slice((page - 1) * perPage, page * perPage));\n    }\n  };\n\n  const goToPrevPage = e => {\n    e.preventDefault();\n    setCurrentPage(prevVal => prevVal - 1 === 0 ? prevVal : prevVal - 1);\n\n    if (currentPage !== 1) {\n      setSlicedData([...data].slice((currentPage - 2) * perPage, (currentPage - 1) * perPage));\n    }\n  };\n\n  const goToNextPage = e => {\n    e.preventDefault();\n    setCurrentPage(prevVal => prevVal === pages ? prevVal : prevVal + 1);\n\n    if (currentPage !== pages) {\n      setSlicedData([...data].slice(currentPage * perPage, (currentPage + 1) * perPage));\n    }\n  };\n\n  return {\n    slicedData,\n    pagination,\n    prevPage: goToPrevPage,\n    nextPage: goToNextPage,\n    changePage\n  };\n};\n\nexport default Pagination;","map":{"version":3,"sources":["C:/Users/HP/Desktop/react-pagination-with-custom-hook/src/hooks/Pagination.js"],"names":["useState","Pagination","initialState","itemsPerPage","data","startFrom","perPage","pages","Math","ceil","Object","keys","length","pagination","currentPage","setCurrentPage","slicedData","setSlicedData","slice","ellipsisLeft","ellipsisRight","i","push","id","current","ellipsis","changePage","page","e","preventDefault","goToPrevPage","prevVal","goToNextPage","prevPage","nextPage"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\nconst Pagination = (initialState) => {\r\n  const { itemsPerPage, data, startFrom } = initialState;\r\n  const perPage = itemsPerPage ? itemsPerPage : 20;\r\n  const pages = Math.ceil(Object.keys(data).length / perPage);\r\n  const pagination = [];\r\n  const [currentPage, setCurrentPage] = useState(startFrom <= pages ? startFrom : 1);\r\n  const [slicedData, setSlicedData] = useState([...data].slice((currentPage - 1) * perPage, currentPage * perPage));\r\n\r\n  let ellipsisLeft = false;\r\n  let ellipsisRight = false;\r\n  for(let i = 1; i <= pages; i++) {\r\n    if(i === currentPage) {\r\n      pagination.push(\r\n        { id: i, current: true, ellipsis: false }\r\n      );\r\n    }else {\r\n      if(i < 2 || i > pages - 1 || i === currentPage - 1 || i === currentPage + 1) {\r\n        pagination.push(\r\n          { id: i, current: false, ellipsis: false }\r\n        );\r\n      }else if(i > 1 && i < currentPage && !ellipsisLeft) {\r\n        pagination.push(\r\n          { id: i, current: false, ellipsis: true }\r\n        );\r\n        ellipsisLeft = true;\r\n      }else if(i < pages && i > currentPage && !ellipsisRight) {\r\n        pagination.push(\r\n          { id: i, current: false, ellipsis: true }\r\n        );\r\n        ellipsisRight = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  const changePage = (page, e) => {\r\n    e.preventDefault();\r\n    if(page !== currentPage) {\r\n      setCurrentPage(page);\r\n      setSlicedData([...data].slice((page - 1) * perPage, page * perPage));\r\n    }\r\n  }\r\n\r\n  const goToPrevPage = (e) => {\r\n    e.preventDefault();\r\n    setCurrentPage(prevVal => prevVal - 1 === 0 ? prevVal : prevVal - 1);\r\n    if(currentPage !== 1) {\r\n      setSlicedData([...data].slice((currentPage - 2) * perPage, (currentPage - 1) * perPage));\r\n    }\r\n  }\r\n\r\n  const goToNextPage = (e) => {\r\n    e.preventDefault();\r\n    setCurrentPage(prevVal => prevVal === pages ? prevVal : prevVal + 1);\r\n    if(currentPage !== pages) {\r\n      setSlicedData([...data].slice(currentPage * perPage, (currentPage + 1) * perPage));\r\n    }\r\n  }\r\n\r\n  return {\r\n    slicedData,\r\n    pagination,\r\n    prevPage: goToPrevPage,\r\n    nextPage: goToNextPage,\r\n    changePage\r\n  }\r\n}\r\n\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}